{"name":"Gandi SSL avec Nginx","tagline":"Un guide pour configurer un certificat SSL (Gandi) pour Nginx sur Debian","body":"> Je découvre le sujet, j'ai donc probablement fait des confusions, raté des conventions, mélangé des concepts, et peut-être même insulté des divinités.\r\n> N'hésitez pas à utiliser tous les moyens nécessaires ([issue](https://github.com/jlecour/ssl-gandi-nginx-debian/issues/new) ou [pull-request](https://github.com/jlecour/ssl-gandi-nginx-debian/pulls) GitHub, [twitter][jlecour], mail …) pour me faire vos retours, sur le fond comme sur la forme.\r\n\r\n**Sommaire** :\r\n\r\n1. [Objectif](#1-objectif)\r\n2. [Création du certificat](#2-cr%C3%A9ation-du-certificat)\r\n3. [Configuration du serveur](#3-configuration-du-serveur)\r\n4. [Vérifications](#4-v%C3%A9rifications)\r\n5. [Ressources utiles](#5-ressources-utiles)\r\n\r\n# 1. Objectif\r\n\r\nL'objectif est de protéger les communications entre un serveur web et ses clients en SSL et en respectant le plus possible les règles de l'art, mais dans un contexte précis, celui de certificats _wildcard_ délivrés par Gandi.\r\n\r\nTous les fichiers sont présents dans l'arborescence partant de [/etc](etc) : config Nginx, fichiers de certificat, …\r\nIls correspondent à un vrai certificat, pour le domaine `www.example.com`, sauf que Gandi ne l'a jamais réellement généré et son contenu est bidon.\r\n\r\nLa plupart des commandes décrites ici doit être exécutée par un utilisateur privilégié, comme **root**.\r\nSeules les commandes liées au vérification post-installation peuvent être exécutées avec un utilisateur normal.\r\n\r\n## Certificat _wildcard_ SSL Standard, délivré par Gandi\r\n\r\nCe type de certificat coûte environ 120 €/an. Il permet de protéger avec un même certificat tous les sous-domaines (de premier niveau) d'un nom de domaine principal.\r\n\r\nIl est délivré automatiquement et assez rapidement (moins d'1 heure).\r\n\r\nVous pouvez aussi opter pour un certificat **SSL Pro** (_wildcard_ ou pas). Il coûtera plus cher, nécessitera une vérification de documents, mais vous apportera une garantie financière.\r\n\r\nLa procédure décrite ici concerne donc les certificats **SSL Standard** mais fonctionne avec les certificats **SSL Pro**.\r\n\r\n## Niveau _intermediate_\r\n\r\nDans son guide [Server-Side TLS][server-side-tls], Mozilla propose 3 niveaux de configuration. Pour chacun, voici les plus anciens clients compatibles, par niveau :\r\n\r\n- **modern** : Firefox 27, Chrome 22, IE 11, Opera 14, Safari 7, Android 4.4, Java 8\r\n- **intermediate** : Firefox 1, Chrome 1, IE 7, Opera 5, Safari 1, Windows XP IE8, Android 2.3, Java 7\r\n- **old** :\tWindows XP IE6, Java 6\r\n\r\nNous allons opter pour une configuration **intermediate**, qui nous permet d'avoir un **bon compromis compatibilité/sécurité**.\r\n\r\n### SHA-2\r\n\r\nAu niveau **intermediate** nous avons le choix entre des certificats SHA-1 ou SHA-2 (256 bits).\r\n\r\nNous allons choisir SHA-2 pour être plus \"compatible\" avec la tendance des navigateurs récents. En effet, [Google déprécie progressivement les certificats SHA-1](http://blog.chromium.org/2014/09/gradually-sunsetting-sha-1.html).\r\n\r\nPour les certificats SHA-2, certains navigateurs n'ont pas encore ajouté les certificats racines. Il est donc prudent de les rajouter manuellement dans les chaînes de certification. Le [Wiki de Gandi](http://wiki.gandi.net/fr/ssl/intermediate) apporte plus de précision sur la récupération des certificats intermédiaires.\r\n\r\n### HSTS: HTTP Strict Transport Security\r\n\r\nSi votre site ne doit être consultable qu'en HTTPS, l'en-tête HTTP `Strict-Transport-Security` (HSTS) permettra de s'assurer que les navigateurs refuseront toute connexion non chiffrée sur votre domaine. La durée de vie de l'en-tête doit être assez longue : la valeur conseillée est de 180 jours, mais c'est souvent 365 jours que l'on rencontre dans la configuration.\r\n\r\nIl est possible d'être conforme à la configuration **intermediate** sans appliquer HSTS, mais si vous pouvez vous permettre de n'autoriser que des échanges chiffrés, je vous le recommande.\r\n\r\n## Nginx\r\n\r\nNginx est une excellente terminaison SSL/TLS, en particulier à partir de la version 1.6. C'est le serveur web que nous utilisons déjà, donc nous aurons facilement accès aux meilleurs configurations possibles.\r\n\r\n## Debian\r\n\r\nLe type de système importe peut (tant qu'il ressemble à un Linux/Unix). Nous utiliserons Debian (wheezy) car c'est la distribution qui est sur nos serveurs à ce jour.\r\n\r\nLa seule différence que vous risquer de rencontrer est l'emplacement de certains fichiers.\r\n\r\n# 2. Création du certificat\r\n\r\n\r\n## Formats de certificats\r\n\r\nLes certificats sont fréquemment représentés dans un de ces 2 formats : **DER** et **PEM**. **PEM** étant le format par défaut d'OpenSSL, nous allons surtout manipuler des certificats, clés, chaînes de certificats, etc. de ce type.\r\n\r\nLes outils fournis par OpenSSL facilitent la conversion d'un format à l'autre.\r\n\r\n## Demande d'émission d'un certificat\r\n\r\nIl faut commencer par générer une clé privée (`*.key.pem`) et une demande de certificat (`*.csr.pem`).\r\nPour éviter de faire transiter la clé privée dans un dossier non protégé, on la génère directement dans le dossier final (`/etc/ssl/private`) qui doit avoir les droits `drwx--x---` et appartenir à `root:ssl-cert`.\r\n\r\n    → openssl req -nodes -newkey rsa:2048 -sha256 -keyout /etc/ssl/private/wildcard_example_com.key.pem -out wildcard_example_com.csr.pem\r\n\r\n````\r\nCountry Name (2 letter code) [AU]:FR\r\nState or Province Name (full name) [Some-State]:\r\nLocality Name (eg, city) []:Marseille\r\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:Example Inc.\r\nOrganizational Unit Name (eg, section) []:\r\nCommon Name (e.g. server FQDN or YOUR name) []:*.example.com\r\nEmail Address []:contact@example.com\r\n\r\nPlease enter the following 'extra' attributes\r\nto be sent with your certificate request\r\nA challenge password []:\r\nAn optional company name []:\r\n````\r\n\r\nLe contenu du CSR devra être transmis à Gandi.\r\n\r\n    → cat wildcard_example_com.csr.pem\r\n\r\n````\r\n-----BEGIN CERTIFICATE REQUEST-----\r\nMIICzzCCAbcCAQAwgYkxCzAJBgNVBAYTAkZSMRMwEQYDVQQIEwpTb21lLVN0YXRl\r\nMRIwEAYDVQQHEwlNYXJzZWlsbGUxFTATBgNVBAoTDEV4YW1wbGUgSW5jLjEWMBQG\r\nA1UEAxQNKi5leGFtcGxlLmNvbTEiMCAGCSqGSIb3DQEJARYTY29udGFjdEBleGFt\r\ncGxlLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKO13wEpS2Ka\r\nunLpJVLF2AqYVZV4OK7p7OG4IfVhkK5wP/kh8KYxyOHZZDx+rGfJE1UA8dJQd+EV\r\nxST0tdN2tw0Dv0jSv6SjXoQO1inTbDf+qixxAj/RxAVmn8AuWC3g/YtI7Wikb3PO\r\n+h81Ezb7i4rkZGYoFleDOpprQvxZEKVXOyU9bumKJRY3YO7xmwdV1pVt+vwgyR+8\r\nsI1R7OCglPwdYlRD9R0ZFEzpPYkDmY7qkx9Jk+TJNewSyS4wy6qg6Neguxg+hYaD\r\nMLY5kXmhmRBHlTaOznbi8m/lEIszH9/r+4weDjt66DPEmM0vUEl3p8dZUb2Nkn7n\r\ngBOCM4/mdhcCAwEAAaAAMA0GCSqGSIb3DQEBCwUAA4IBAQAri8Gtz2SkiBMXb4Me\r\nICL/exVrM6q03wcrFSOE9XJbcyOOA1gP8+zWNcNlMyfd/MpB5lNRPdzKT01zb17z\r\nkiteEDTSvGMTwklWJN08hJDXPXs2POnQDZau/FEAvLM8jWheq+UzSsIsuSju1MUJ\r\nra8d/3FH25J5eRCvy63tPpje9qk+EoHxO5g22QCcgXIc2CANicLNjTKkECG+TRN1\r\nWMmir+a2+raBgNZCrE5N87SsfHnhPZEJExXL5AuKTAOH3FcBb0G1f4KcKPgULbrE\r\naH9rpFywuEMgnkp3eRoxtPs7UuTVTaNIjCJX+Q5oY2eT6cH1UVwn8qnJe1j8S6Mx\r\nCGi7\r\n-----END CERTIFICATE REQUEST-----\r\n````\r\n\r\nLa clé privée ne doit être **communiquée à personne** et être stockée de manière **sécurisée** sur votre serveur (attention aux permissions). Ici, il s'agit d'un certificat factice : le dévoiler ne présente aucun risque.\r\n\r\n    → cat wildcard_example_com.key.pem\r\n\r\n````\r\n-----BEGIN RSA PRIVATE KEY-----\r\nMIIEpAIBAAKCAQEAo7XfASlLYpq6cuklUsXYCphVlXg4runs4bgh9WGQrnA/+SHw\r\npjHI4dlkPH6sZ8kTVQDx0lB34RXFJPS103a3DQO/SNK/pKNehA7WKdNsN/6qLHEC\r\nP9HEBWafwC5YLeD9i0jtaKRvc876HzUTNvuLiuRkZigWV4M6mmtC/FkQpVc7JT1u\r\n6YolFjdg7vGbB1XWlW36/CDJH7ywjVHs4KCU/B1iVEP1HRkUTOk9iQOZjuqTH0mT\r\n5Mk17BLJLjDLqqDo16C7GD6FhoMwtjmReaGZEEeVNo7OduLyb+UQizMf3+v7jB4O\r\nO3roM8SYzS9QSXenx1lRvY2SfueAE4Izj+Z2FwIDAQABAoIBAQCO7LlEykiGTY95\r\nwxJSsWdr2JLfa5YRHykv5xG+qO8nW9h+KKNwdQZsJt7b8buS4HmAPNLiSl5epCL5\r\noKsdcwdc1Wiqq1Ok6PwbTtiqq2pPeIYZRpAwJ3J7RJ0zq0JQy5yPfZvHP8gN0yWL\r\nGUstNW8eU0dT6KuYu3juV7ajmR5vOdNeGcxftA/gN0SQGlSuK14K2pyZAirBejNc\r\nRozPtC4tF6XLgrUUcmYlw2q5Uji5jJah8LZQEf6rFi36y43iteYE+7bz/gnBZ7tP\r\n7y7SozkvtZ8tVUl8I0LtNz3KOv/ukTasNFBIQpWK5auU2n4BMw047nSPP4nWL5+J\r\nTOaGu0ABAoGBANE5obJtNtNh+zgNv9qKAjHAvBgg+T43bZoqgQJzXsoKveezQ6K7\r\nx+4yZ7nie2WoKoRO2w3Gsa0JHqoslK6bg3MVaabU1miLR73UFkHPW5qkMzSb9ndN\r\nP/v/LWO1glbHMqO9kewdJoJEjFwUoWVdEKQvUW5ZoLya3wHU8Ab1vTtBAoGBAMhP\r\nV/eA57lF9Pq+aEfljyaXvASzgAJM8KQHyG16I3LiK5CFVIHPrDvCH4HybeuwCG7S\r\nHfM29678DzZpTHfplfnKXlPoG/QJCsiKUtn3OMTHyiUsHT/j2juqA6cZ3/0G5LO8\r\n4zNQpLrrzgrrf4P/p6pXVZKmIERTdDVBhaWkUZNXAoGACzzNMogrKa9ZjukuJM7E\r\nz2dKswESYgUYHe+qfjc0ICXzjT5To6nyUxjh+VnwxsUBg5m4qkTBxkl3HCzIz5gK\r\nt2OvCQblfTf94nRBvcclZGjtVyYJVt8PULmj9ncJSR/p2GGWNNhb+SM1Zry07nzR\r\nKABin0qxF3A6Ch8lxTntsAECgYEAvVWR9lYXsZ4YUzHK67pmNrpRc7gfFQ2Yn9Lj\r\ndeduvlZdizsbh5++UrXIhlGZ6J75OZbNzGh2cSW7U1jweJ+HrRXFV1Ybpe0uDiQA\r\n8BmnxQh7X+t0skEytBadYUMp3sa3QdUWhBiDvFLK7LNwUlpCJtZqAjWYZjzjqLsI\r\nEmtg1/0CgYA214z3XCLXqenPDcJuYHoKaDNY7hBJpcMx+PC/djHa5lbFCYzfhg7h\r\nA+sH/qFmLTkb3Ha+S4uRTWlEfMk7iliwAGfGhYBTCjUQiqdLdwSkO6YBey0nXZLJ\r\nE0pV7+shRPoK7jguy6zzSHK1ygWnqTSn8TePgtIXOoVcZoH6jQBfcA==\r\n-----END RSA PRIVATE KEY-----\r\n````\r\n\r\nGandi propose une vérification par enregistrement DNS, par fichier texte ou par envoi d'un e-mail. Chacune a bien sûr ses avantages et inconvénients.\r\n\r\nSi votre serveur est déjà configuré ou si vous avez déjà une adresse email \"admin@example.com\", alors ces 2 méthodes sont les plus rapides.\r\n\r\nL'enregistrement DNS vous permet d'effectuer la vérification même si le reste de votre infrastructure n'est pas encore prêt. La première vérification n'intervient en revanche que 25 minutes après la demande de création du certificat (puis toutes les 5 minutes jusqu'au succès).\r\n\r\nUne fois la validation effectuée, vous pouvez récupérer votre certificat et le stocker dans `/etc/ssl/certs/wildcard_example_com.crt.pem`.\r\n\r\n# 3. Configuration du serveur\r\n\r\n## Forward Secrecy\r\n\r\nDans un mécanisme de chiffrement d'un échange à partir d'une clé privée, le problème est que si on met la main sur cette clé, tous les échanges passés et futurs deviennent lisibles. La révocation d'un certificat ne protège pas le déchiffrement de ce qui a été chiffré dans le passé. Dans une situation de surveillance des échanges, on peut tout intercepter/stocker et se dire qu'il sera peut-être possible de tout déchiffrer plus tard. Les agences de renseignement sont soupçonnées d'appliquer ce genre de stratégie.\r\n\r\nLe principe de **Forward Secrecy** est que le client et le serveur se mettent d'accord sur une clé temporaire de chiffrement. Cette clé restera accessible uniquement le temps de la session TLS. Si une de ces clés est récupérée ou découverte, seules les échanges de la session en question seront compromis.\r\n\r\nPour faire fonctionner ce mécanisme, le client et le serveur doivent procéder à un **échange de clés Diffie-Hellman**. Le serveur va communiquer au client un (très grand) nombre premier et un générateur. Pour éviter un compromission de type [MITM][mitm], le serveur signe l'échange avec sa clé privée. Les paramètres de l'échange sont déterminés à l'avance et stockés sur le serveur.\r\n\r\nOpenSSL permet de générer le nombre premier et le générateur ainsi que de choisir leur complexité, exprimée en bits. La complexité la plus courante est **2048 bits**. De plus en plus **4096 bits** sont recommandés, mais les systèmes anciens (tels que Java 6 ou IE6) ne supportent pas plus de **1024 bits**.\r\n\r\nAu niveau **intermediate** il vaut mieux utiliser (au moins) 2048 bits, même si 1024 bits sont acceptables. Dans notre cas, nous utiliserons 2048 bits, car même le niveau **modern** n'impose pas 4096 bits.\r\n\r\nAttention, la génération des paramètres Diffie-Hellman peut prendre plusieurs minutes :\r\n\r\n    → cd /etc/ssl/ \\\r\n    && openssl dhparam -rand – 2048 -out dhparam-2048.pem \\\r\n    && ln -s dhparam-2048.pem dhparam.pem\r\n\r\nEn sortie, le fichier devrait ressembler à ça :\r\n\r\n````\r\n-----BEGIN DH PARAMETERS-----\r\nMZ9wdNIzSPihtIKQLMBF1GS6UJKjIQznU06XeY0d5u4LanYngWCTFPaa3MqN9h/Z\r\nThWGYMx7Aa6I82Tao0my2ee6jvOC5yc9dSEW51cjHdhjASzhtUEoIXLGTasfp2QF\r\nZA85bq8/iU/n8qGYvSk5ieP1xhOI07YxaReER/0wmG9rHIBrnYn2j5nYSxfcPfsQ\r\noqzyJPg+dp7vifJAWxj/2jkzbUK9Ij3hHiFitdNCmqRqCpIjrU6Zq+ZenRz9T3KE\r\nQZK68V0RM3hBt6CVQ80vfhYmT+3f54gNB9jfeHCwqLCYotWdmO7Q03FR+mgA4Zhg\r\nA/q9Cm/STK80ZQkdnfdm7qnJFG/+vJ7LTdIN4L1vMxkaMg2c5q63FQpdPCAQI=\r\n-----END DH PARAMETERS-----\r\n````\r\n\r\nPour faciliter l'utilisation de plusieurs niveaux de complexité selon les installations (ou les essais), nous avons écrit le fichier avec un suffixe explicite puis créé un lien symbolique avec la commande `ln -s`.\r\n\r\n## Hiérarchie des certificats\r\n\r\nPour vérifier l'authenticité des certificats, les clients s'appuient sur un ensemble de certificats racines. Tous les certificats sont signés à partir de ces **certificats racines** ou de certificats descendant eux-mêmes de ces certificats racines : les ceritificats intermédiaires. Généralement, ce sont ces derniers qui sont utilisés pour signer nos certificats finaux.\r\n\r\nDans notre cas, nous avons :\r\n\r\n- la racine (0) `AddTrust External Root`\r\n- la branche (1) `USERTrust RSA AddTrust CA`\r\n- la branche (2) `Gandi Standard SSL CA2`\r\n- la feuille (3) `*.example.com`\r\n\r\nNotez bien cet ordre car il nous servira pour créer les deux fichiers de chaîne.\r\n\r\n## Fichier de la chaîne de certificats\r\n\r\nIl est nécessaire d'indiquer au serveur web non seulement le certificat de notre domaine, mais aussi tous les certificats intermédiaires.\r\n\r\nLe certificat racine étant connu, nous allons créer un fichier `/etc/ssl/certs/wildcard_example_com.chain.pem` qui contiendra, dans l'ordre, les trois niveaux restants :\r\n\r\n- le certificat généré par Gandi (**feuille 3**) ;\r\n- le certificat intermédiaire de Gandi (**branche 2**) ;\r\n- le certificat _cross-signed_ (**branche 1**).\r\n\r\nPour générer le fichier de chaîne :\r\n\r\n    → cd /etc/ssl/certs/ \\\r\n    && echo -n '' > wildcard_example_com.chain.pem \\\r\n    && cat wildcard_example_com.chain.pem | tee -a wildcard_example_com.chain.pem \\\r\n    && wget -O - https://www.gandi.net/static/CAs/GandiStandardSSLCA2.pem | tee -a wildcard_example_com.chain.pem> /dev/null \\\r\n    && wget -O - http://crt.usertrust.com/USERTrustRSAAddTrustCA.crt | openssl x509 -inform DER -outform PEM | tee -a wildcard_example_com.chain.pem> /dev/null\r\n\r\nExplications :\r\n\r\n- on se place dans `/etc/ssl/certs` ;\r\n- le `echo` crée un fichier vide ;\r\n- on ajoute le certificat du domaine (directement au format `PEM`) ;\r\n- on ajoute le certificat de Gandi (directement au format `PEM`) ;\r\n- on ajoute le certificat _cross-signed_ (au format `DER` il faut donc le convertir avant de l'ajouter) ;\r\n- l'utilisation de `tee` permet d'ajouter un `sudo` si besoin.\r\n\r\nPour des certificats **SSL Pro**, le certificat intermédiaire de Gandi est différent, mais le principe et les manipulations sont identiques.\r\n\r\n## Fichier des certificats agrafés (_stapling_)\r\n\r\nLa plupart des clients qui se connecteront au serveur web voudront vérifier la non-révocation du certificat. Deux stratégies permettent cette vérification : via un fichier CRL (_Certificate Revocation List_), mais vu le nombre de certificats en circulation ça devient impraticable, ou alors via une interrogation OCSP (_Online Certificate Status Protocol_).\r\n\r\nPour éviter au client de faire une requête additionnelle, le serveur peut mettre en cache le résultat de cette vérification et la servir directement au client. Pour cela il faut indiquer à Nginx la liste des certificats, concaténés dans un seul fichier.\r\n\r\nLes certificats doivent être dans l'ordre de la hiérarchie, en partant de celui qui a signé notre certificat (ici `GandiStandardSSLCA2`) et en remontant jusqu'à la racine.\r\n\r\nNous allons créer le fichier `/etc/ssl/certs/gandi-standardssl-2.chain.pem` qui contiendra, dans l'ordre :\r\n\r\n- le certificat intermédiaire de Gandi (**branche 2**) ;\r\n- le certificat _cross-signed_ (**branche 1**);\r\n- le certificat racine (**racine 0**).\r\n\r\nVoici la commande :\r\n\r\n    → cd /etc/ssl/certs/ \\\r\n    && echo -n '' > gandi-standardssl-2.chain.pem \\\r\n    && wget -O - https://www.gandi.net/static/CAs/GandiStandardSSLCA2.pem | tee -a gandi-standardssl-2.chain.pem> /dev/null \\\r\n    && wget -O - http://crt.usertrust.com/USERTrustRSAAddTrustCA.crt | openssl x509 -inform DER -outform PEM | tee -a gandi-standardssl-2.chain.pem> /dev/null \\\r\n    && cat AddTrust_External_Root.pem | tee -a gandi-standardssl-2.chain.pem\r\n\r\n## Récapitulatif des fichiers de certificats\r\n\r\n**`/etc/ssl/certs/gandi-standardssl-2.chain.pem`**\r\n\r\nC'est la chaîne des certificats à utiliser pour _OCSP stapling_. Ce fichier peut être utilisé par plusieurs certificats **Gandi Standard SSL**.\r\n\r\nIl n'est pas indispensable pour faire fonctionner le domaine en HTTPS mais c'est utile pour les performances du site.\r\n\r\n**`/etc/ssl/certs/wildcard_example_com.chain.pem`**\r\n\r\nIl contient le certificat du domaine et les certificats intermédiaires.\r\n\r\n**`/etc/ssl/certs/wildcard_example_com.crt.pem`**\r\n\r\nIl contient seulement le certificat du domaine. Il ne sera pas utilisé directement par le serveur web, mais il est pratique de le conserver.\r\n\r\n**`/etc/ssl/private/wildcard_example_com.csr.pem`**\r\n\r\nC'est le fichier contenant la demande de création d'un certificat. Il est inutile sur le serveur, mais il est intéressant de le conserver pour vérifier comment la demande initiale avait été effectuée.\r\n\r\n**`/etc/ssl/private/wildcard_example_com.key.pem`**\r\n\r\nC'est la clé privée du certificat. Ce fichier est indispensable.\r\n\r\n### droits d'accès\r\n\r\nLa clé privée doit être accessible uniquement en lecture et par le seul compte root. Il est recommandé de créer la clef privée directement dans un dossier accessible uniquement par root (par exemple: /etc/ssl/private).\r\n\r\n    → chmod 640 /etc/ssl/private/wildcard_example_com.key.pem\r\n    → chown root:ssl-cert /etc/ssl/private/wildcard_example_com.key.pem\r\n\r\nLes fichiers présents dans `/etc/ssl/certs` peuvent être accessibles en lecture à tout le monde, mais seulement aux administrateurs pour l'écriture.\r\n\r\n## Nginx\r\n\r\nLa configuration de Nginx se fait via le fichier `/etc/nginx/nginx.conf`, dans lequel on trouve des réglages généraux. Il y aussi une section pour la partie `http` dans laquelle on trouve des sections `server`. Toutes ces sections sont appelées **bloc** car elles utilisent une syntaxe à base d'accolades et sont imbriquées.\r\n\r\nPar habitude on extrait souvent les blocs spécifiques aux sites et applications gérées dans des fichiers spécifiques, que l'on inclut ensuite dans la configuration principale via la directive `include`.\r\n\r\nVoici un exemple typique de configuration :\r\n\r\n    → cat /etc/nginx/nginx.conf\r\n\r\n````nginx\r\nuser www-data;\r\nworker_processes 32;\r\npid /var/run/nginx.pid;\r\n\r\nevents {\r\n  worker_connections 768;\r\n}\r\n\r\nhttp {\r\n  sendfile on;\r\n  tcp_nopush on;\r\n  tcp_nodelay on;\r\n  keepalive_timeout 65;\r\n\r\n  include /etc/nginx/mime.types;\r\n  default_type application/octet-stream;\r\n\r\n  access_log /var/log/nginx/access.log;\r\n  error_log /var/log/nginx/error.log;\r\n\r\n  include /etc/nginx/sites-enabled/*;\r\n}\r\n````\r\n\r\nIci on voit que tous les fichiers présents dans `/etc/nginx/sites-enabled` sont automatiquement inclus. Nous allons placer notre configuration pour le site `www.example.com` dans `/etc/nginx/sites-enabled/www_example_com.conf`\r\n\r\n    → cat /etc/nginx/sites-enabled/www_example_com.conf\r\n\r\n````nginx\r\nserver {\r\n  listen 80;\r\n  rewrite ^ https://$host$request_uri? permanent;\r\n}\r\nserver {\r\n  listen 443 ssl;\r\n\r\n  server_name www.example.com;\r\n\r\n  include /etc/nginx/wildcard_example_com.conf;\r\n\r\n  root /var/www/example;\r\n  index index.htm index.html;\r\n}\r\n````\r\n\r\nComme nous mettons en place un certificat SSL _wildcard_ pour le domaine, il est probable que nous réutiliserons la partie SSL pour plusieurs configurations de sites (sous-domaines). Nous la placerons donc dans `/etc/nginx/wildcard_example_com.conf`.\r\n\r\n    → cat /etc/nginx/wildcard_example_com.conf\r\n\r\n````nginx\r\nssl_certificate /etc/ssl/certs/wildcard_example_com.crt.pem;\r\nssl_certificate_key /etc/ssl/private/wildcard_example_com.key.pem;\r\n\r\nssl_session_timeout 5m;\r\nssl_session_cache shared:SSL:50m;\r\n\r\nssl_dhparam /etc/ssl/dhparam.pem;\r\n\r\nssl_protocols TLSv1 TLSv1.1 TLSv1.2;\r\nssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';\r\nssl_prefer_server_ciphers on;\r\n\r\nssl_stapling on;\r\nssl_stapling_verify on;\r\nssl_trusted_certificate /etc/ssl/gandi-standardssl-2.chain.pem;\r\n\r\nresolver 127.0.0.1;\r\n````\r\n\r\n_Ci-dessous, le nom des directives est cliquable et conduit vers la documentation de Nginx._\r\n\r\n- [`ssl_certificate`](http://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_certificate) est l'emplacement du fichier de certificat\r\n- [`ssl_certificate_key`](http://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_certificate_key) est l'emplacement du fichier de la clé privée du certificat\r\n- [`ssl_session_timeout`](http://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_session_timeout) et [`ssl_session_cache`](http://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_session_cache) permettent de préciser où, quelle quantité et combien de temps garder les sessions SSL. J'ai appliqué ici les recommandations de [Server-Side TLS][server-side-tls].\r\n- [`ssl_dhparam`](http://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_dhparam) indique l'emplacement du fichier des paramètres (généré plus haut) pour l'échange de clés Diffie-Hellman.\r\n- [`ssl_protocols`](http://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_protocols) est la liste des protocoles de chiffrement acceptés par le serveur. À ce jour, seuls les versions `TLSv1`, `TLSv1.1` et `TLSv1.2` de TLS sont acceptables. Plus d'info sur l'[historique de SSL/TLS](http://fr.wikipedia.org/wiki/Transport_Layer_Security#Historique) sur Wikipedia. Les failles récentes de `SSLv3` nous ont poussés à le retirer autant que possible des listes de protocoles utilisés.\r\n- [`ssl_ciphers`](http://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_ciphers) est la liste ordonnée des ciphers (algorithmes de chiffrement) qui sont acceptés. La liste est directement issue du [générateur de configuration][ssl-config-generator] de [Server-Side TLS][server-side-tls]\r\n- [`ssl_prefer_server_ciphers`](http://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_prefer_server_ciphers) indique que la liste et l'ordre du serveur priment sur ceux indiqués par le client.\r\n- [`ssl_stapling`](http://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_stapling) et [`ssl_stapling_verify`](http://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_stapling_verify) permettent d'activer la fonction de **OCSP stapling**, expliquée plus haut. [`ssl_trusted_certificate`](http://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_trusted_certificate) indique à Nginx où trouver le fichier de la chaîne de certificats (généré plus haut).\r\n- [`resolver`](http://nginx.org/en/docs/http/ngx_http_ssl_module.html#resolver) indique l'adresse qu'il faut interroger pour les résolutions de nom, utilisée lors de la vérification de validité des certificats parents, via le protocole `OCSP`.\r\n\r\n# 4. Vérifications\r\n\r\nPendant toute la durée des vérifications, je conseille de suivre les logs d'erreur de Nginx.\r\nSi une erreur s'est glissée quelque part, vous aurez plus de chance de la repérer comme ça.\r\nIl se peut par exemple que l'adresse du _resolver_ ne soit pas bonne (vécu sur un serveur sans _resolver_ local).\r\n\r\n    → tail -f /var/log/nginx/error.log\r\n\r\nUne fois tout ceci configuré, il faut vérifier la configuration de Nginx puis, si elle est valide, la recharger :\r\n\r\n    → service nginx configtest\r\n    → service nginx reload\r\n\r\n## Dans un navigateur\r\n\r\nLe premier test, et le plus simple, est de se rendre à l'adresse du site via un navigateur. La plupart des navigateurs propose un signe distinctif dans la barre d'adresse, qui indique si la navigation est chiffrée ou pas, si le certificat est valide.\r\n\r\nDans Chrome par exemple si vous avez un joli cadenas vert, tout va bien.\r\nS'il est gris avec un triangle jaune, c'est presque bon mais il y a des obstacles à une navigation proprement chiffrée de bout en bout (certificat trop faible, sous-requêtes non chiffrées …).\r\nS'il est rouge et/ou barré, alors quelque chose ne va pas du tout.\r\n\r\nEt si aucun cadenas n'apparaît, c'est que la communication n'est pas chiffrée du tout.\r\n\r\n## Avec [SSLLabs][ssllabs]\r\n\r\nTrès bon outil en mode web pour vérifier la configuration SSL/TLS d'un domaine. Vous indiquez votre domaine et au bout d'une poignée de minutes il vous rend un rapport complet.\r\n\r\nUne note synthétique vous indique la qualité de votre configuration.\r\nDes conseils vous indiquent ce qu'il faut améliorer. Le détail de toutes les constations vos permet de savoir exactement ce qu'il en est.\r\n\r\n## Avec [CipherScan][cipherscan]\r\n\r\nIl s'agit de quelques outils, écrits par [Julien Véhent][jvehent], pour analyser la configuration d'un domaine et faire des recommandations concrètes.\r\n\r\n### cipherscan\r\n\r\n`cipherscan` est un script qui vous indique quelle est la configuration du certificat\r\n\r\n    → ./cipherscan www.example.com\r\n\r\n````\r\n........................\r\nTarget: www.example.com:443\r\n\r\nprio  ciphersuite                  protocols              pfs_keysize\r\n1     ECDHE-RSA-AES128-GCM-SHA256  TLSv1.2                ECDH,P-256,256bits\r\n2     ECDHE-RSA-AES256-GCM-SHA384  TLSv1.2                ECDH,P-256,256bits\r\n3     DHE-RSA-AES128-GCM-SHA256    TLSv1.2                DH,4096bits\r\n4     DHE-RSA-AES256-GCM-SHA384    TLSv1.2                DH,4096bits\r\n5     ECDHE-RSA-AES128-SHA256      TLSv1.2                ECDH,P-256,256bits\r\n6     ECDHE-RSA-AES128-SHA         TLSv1,TLSv1.1,TLSv1.2  ECDH,P-256,256bits\r\n7     ECDHE-RSA-AES256-SHA384      TLSv1.2                ECDH,P-256,256bits\r\n8     ECDHE-RSA-AES256-SHA         TLSv1,TLSv1.1,TLSv1.2  ECDH,P-256,256bits\r\n9     DHE-RSA-AES128-SHA256        TLSv1.2                DH,4096bits\r\n10    DHE-RSA-AES128-SHA           TLSv1,TLSv1.1,TLSv1.2  DH,4096bits\r\n11    DHE-RSA-AES256-SHA256        TLSv1.2                DH,4096bits\r\n12    DHE-RSA-AES256-SHA           TLSv1,TLSv1.1,TLSv1.2  DH,4096bits\r\n13    AES128-GCM-SHA256            TLSv1.2\r\n14    AES256-GCM-SHA384            TLSv1.2\r\n15    AES128-SHA256                TLSv1.2\r\n16    AES256-SHA256                TLSv1.2\r\n17    AES128-SHA                   TLSv1,TLSv1.1,TLSv1.2\r\n18    AES256-SHA                   TLSv1,TLSv1.1,TLSv1.2\r\n19    DHE-RSA-CAMELLIA256-SHA      TLSv1,TLSv1.1,TLSv1.2  DH,4096bits\r\n20    CAMELLIA256-SHA              TLSv1,TLSv1.1,TLSv1.2\r\n21    DHE-RSA-CAMELLIA128-SHA      TLSv1,TLSv1.1,TLSv1.2  DH,4096bits\r\n22    CAMELLIA128-SHA              TLSv1,TLSv1.1,TLSv1.2\r\n23    DES-CBC3-SHA                 TLSv1,TLSv1.1,TLSv1.2\r\n\r\nCertificate: trusted, 2048 bit, sha256WithRSAEncryption signature\r\nTLS ticket lifetime hint: 300\r\nOCSP stapling: supported\r\nServer side cipher ordering\r\n````\r\n\r\nIl sait également exporter ses résultats au format JSON.\r\n\r\n### analyze.py\r\n\r\n`analyze.py` est un script qui vous indique si votre certificat respecte le niveau souhaité\r\n\r\n    → ./analyze.py -l intermediate -t www.example.com\r\n\r\n````\r\nwww.example.com:443 has intermediate ssl/tls\r\nand complies with the 'intermediate' level\r\n````\r\n\r\nCe dernier peut être exécuté en _mode Nagios_ afin d'automatiser des tests régulier et émettre des alertes si la conformité était compromise.\r\n\r\nEn plus d'analyser un site en direct, il sait utiliser en entrée un fichier JSON local (sorti de `cipherscan`), mais aussi exporter ses propres résultats dans un fichier JSON (pour par exemple garder un historique structuré des conclusions).\r\n\r\n### openssl\r\n\r\nDes version binaires d'OpenSSL sont fournies au cas où le système hôte n'en dispose pas où si elle est problématique. C'est notamment le cas pour Mac OS X.\r\n\r\nAussi bien `cipherscan` que `analyze.py` peuvent utiliser la version du système ou une version spécifique (avec l'option `-o`).\r\n\r\n# 5. Ressources utiles\r\n\r\n\r\n**[How 2 SSL][how2ssl] (en anglais)**\r\n\r\nUne sorte de mini-wiki sur le SSL avec des clarifications et des approfondissements de certains concepts clés.\r\n\r\n**[Je Veux HTTPS][jeveuxhttps] (en français)**\r\n\r\nUn bon site, écrit en français. Si je ne l'avais pas découvert tardivement, je n'aurais probablement pas écrit cet article.\r\n\r\n**[Server-Side TLS][server-side-tls] (en anglais)**\r\n\r\nUn long guide, très complet, à propos de la mise en place de TLS côté serveur, avec des explications concrètes et claires sur tous les éléments en jeu.\r\n\r\n**[TLS with Nginx and StartSSL](https://jve.linuxwall.info/blog/index.php?post/2013/10/12/A-grade-SSL/TLS-with-Nginx-and-StartSSL) (en anglais)**\r\n\r\nUn article de [Julien Véhent][jvehent] sur un thème similaire.\r\nJulien est OpSec chez Mozilla. Il est l'auteur de [Server-Side TLS][server-side-tls].\r\n\r\n**[SSL config generator][ssl-config-generator] (en anglais)**\r\n\r\nUn outil d'aide à la configuration de Apache/Nginx/HAProxy, basé sur les recommandations de [Server-Side TLS][server-side-tls].\r\n\r\n**[Howto SSL][howto-ssl-evolix]**\r\n\r\nMon [hébergeur favori][evolix] maintient un excellent [Wiki sur l'infogérance Linux/BSD][wiki-evolix]. Ils ont notamment un [article sur les certificats SSL][howto-ssl-evolix], avec des exemples plus précis de manipulation de certificats.\r\n\r\n# Contributions\r\n\r\nMerci à ceux qui m'ont relu, conseillé, proposé des corrections et clarifications.\r\n\r\n- [Jef Mathiot](https://github.com/jefmathiot)\r\n- [Jérôme Pinguet](https://github.com/jeromecc)\r\n- [Benoît.S](https://twitter.com/benpro82)\r\n- [Geoffroy Desvernay](https://github.com/dgeo)\r\n\r\n[evolix]: http://www.evolix.fr \"Evolix\"\r\n[howto-ssl-evolix]: http://trac.evolix.net/infogerance/wiki/HowtoSSL \"Howto SSL\"\r\n[wiki-evolix]: http://trac.evolix.net/infogerance/wiki \"Infogerance Linux et BSD\"\r\n[mitm]: http://fr.wikipedia.org/wiki/Attaque_de_l%27homme_du_milieu \"Man In The Middle\"\r\n[jeveuxhttps]: https://www.jeveuxhttps.fr/ \"Je Veux HTTPS\"\r\n[jvehent]: http://jve.linuxwall.info/ \"Julien Véhent\"\r\n[how2ssl]: http://how2ssl.com \"How 2 SSL\"\r\n[server-side-tls]: https://wiki.mozilla.org/Security/Server_Side_TLS \"Server Side TLS\"\r\n[ssllabs]: https://www.ssllabs.com/ssltest/analyze.html \"SSLLabs\"\r\n[cipherscan]: https://github.com/jvehent/cipherscan \"CipherScan\"\r\n[ssl-config-generator]: https://mozilla.github.io/server-side-tls/ssl-config-generator/ \"SSL config generator\"\r\n[jlecour]: https://twitter.com/jlecour \"@jlecour\"\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}